{"version":3,"sources":["../src/server.ts","../src/config/db.ts","../src/routes/AuthRoutes.ts","../src/config/constants.ts","../src/config/passport.ts","../src/models/UserModel.ts","../src/routes/PostRoutes.ts","../src/models/PostModel.ts","../src/utils/s3.ts","../src/middlewares/AuthMiddleware.ts"],"sourcesContent":["import express, { Request, Response } from \"express\";\r\nimport passport from \"passport\";\r\nimport session from \"express-session\";\r\nimport { connectMongoDB } from \"./config/db\";\r\n\r\nimport { authRouter } from \"./routes/AuthRoutes\";\r\nimport \"./config/passport\"; // i imported the passport config here... it will run when server get started.\r\nimport cors from \"cors\"\r\nimport { config } from \"dotenv\";\r\nimport MongoStore from \"connect-mongo\";\r\nimport postRouter from \"./routes/PostRoutes\";\r\nimport { authMiddleware } from \"./middlewares/AuthMiddleware\";\r\nconfig({\r\n  path:\".env\"\r\n})\r\nconnectMongoDB();\r\n\r\nconst app = express();\r\n\r\n// corss setup =>\r\napp.use(cors({\r\n  credentials: true,\r\n  origin: [\"http://localhost:3000\",\"http://localhost:5173\"],\r\n}))\r\n\r\n// Middleware setup =>\r\napp.use(express.json());\r\napp.use(session({\r\n  secret: process.env.SECRET_KEY!,\r\n  resave: false,\r\n  saveUninitialized: true,\r\n  cookie: {\r\n    maxAge: 24 * 60 * 60 * 1000, // 1 day in milliseconds\r\n    httpOnly: true, // for security\r\n    secure: process.env.NODE_ENV === \"production\", // Use secure cookies in production\r\n    sameSite: \"strict\", // same-site behavior\r\n  },\r\n  store: MongoStore.create({\r\n    mongoUrl : process.env.DATABASE_URL,\r\n    collectionName: \"sessions\"\r\n  })\r\n}));\r\n\r\n// Initialize Passport =>\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\nconst apiRouter = express.Router();\r\n\r\n// global /api route prefix.\r\napp.use(\"/api\", apiRouter);\r\n\r\n// and then attaching the feature specific routes prefixes.\r\napiRouter.use(\"/auth\", authRouter);\r\napiRouter.use(\"/posts\", authMiddleware, postRouter)\r\n\r\nconst PORT = 8000;\r\nconst DOMAIN = process.env.NODE_ENV === \"production\" ? \"prod_url\" : `http://localhost:${PORT}`\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server started on ${DOMAIN}`);\r\n});\r\n","import mongoose from \"mongoose\";\r\nimport {config} from \"dotenv\"\r\nconfig({\r\n    path: \".env\"\r\n})\r\n\r\nconsole.log('process.env.DATABASE_URL',process.env.DATABASE_URL);\r\nexport const connectMongoDB=async()=>{\r\n    try {\r\n        await mongoose.connect(process.env.DATABASE_URL as string);\r\n        console.log('MongoDB connected');\r\n    } catch (error) {\r\n        console.log('connection error in mongodb: ', error);\r\n        // process.exit(1);\r\n    }\r\n}","import express from \"express\";\r\nimport passport from \"passport\";\r\nimport { FRONTEND_URL } from \"../config/constants\";\r\n\r\nexport const authRouter = express.Router();\r\n\r\nauthRouter.get(\r\n  \"/google\",\r\n  passport.authenticate(\"google\", {\r\n    scope: [\"profile\", \"email\"],\r\n  })\r\n);\r\n\r\nauthRouter.get(\r\n  \"/google/callback\",\r\n  passport.authenticate(\"google\", {\r\n    successRedirect: `${FRONTEND_URL}/home`,\r\n    failureRedirect: `${FRONTEND_URL}/login2`,\r\n  }),\r\n  (req, res) => {\r\n    res.redirect(301, `${FRONTEND_URL}/home`);\r\n  }\r\n);\r\n\r\nauthRouter.get(\"/profile\", (req, res) => {\r\n  if (!req.isAuthenticated()) {\r\n    res.status(401).json({\r\n      message: \"Please login first.\",\r\n    });\r\n  }\r\n  res.json(req.user);\r\n});\r\n\r\nauthRouter.get(\"/logout\", (req, res) => {\r\n  if (req.session) {\r\n    req.session.destroy((err) => {\r\n      if (err) {\r\n        console.error(\"Error destroying session:\", err);\r\n        res.status(500).json({ message: \"Failed to log out\" });\r\n      }\r\n      res.clearCookie(\"connect.sid\"); \r\n      res.status(200).json({ message: \"Logout successful\" });\r\n    });\r\n  } else {\r\n    res.status(200).json({ message: \"No active session to log out\" });\r\n  }\r\n});\r\n","export const FRONTEND_URL=\"http://localhost:5173\"","import { config } from 'dotenv';\r\nimport passport from 'passport';\r\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\r\nimport { User } from '../models/UserModel';\r\nconfig({\r\n  path: \".env\"\r\n})\r\nconsole.log(' process.env.GOOGLE_CLIENT_ID', process.env.GOOGLE_CLIENT_ID!);\r\npassport.use(new GoogleStrategy({\r\n    clientID: process.env.GOOGLE_CLIENT_ID!,\r\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    callbackURL: 'http://localhost:8000/api/auth/google/callback',\r\n  },\r\n  async(accessToken, refreshToken, profile, done) => {\r\n    try {\r\n      const existingUser = await User.findOne({ googleId: profile.id });\r\n      if (existingUser) {\r\n        return done(null, existingUser);\r\n      }\r\n\r\n      const newUser = new User({\r\n        googleId: profile.id,\r\n        name: profile.displayName,\r\n        email: profile.emails ? profile.emails[0].value : \"\",\r\n        profilePicture: profile.photos ? profile.photos[0].value : '',\r\n      });\r\n      await newUser.save();\r\n      return done(null, newUser);\r\n    } catch (error) {\r\n      done(error, undefined);\r\n    }\r\n  }\r\n));\r\n\r\n// Serialize user to save to session\r\npassport.serializeUser((user:any, done) => {\r\n  console.log('user in serialize',user);\r\n  done(null, user.id);\r\n});\r\n\r\npassport.deserializeUser(async (id, done) => {\r\n  try {\r\n    const user = await User.findById(id);\r\n    done(null, user);  // Attach the full user object to `req.user`\r\n  } catch (error) {\r\n    done(error);\r\n  }\r\n});","import mongoose from \"mongoose\";\r\n\r\nconst UserModelSchema = new mongoose.Schema({\r\n    googleId: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    profilePicture: {\r\n      type: String,\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n  },{\r\n    timestamps: true    // shows created and updated At\r\n  })\r\n\r\n\r\nexport const User = mongoose.model(\"User\",UserModelSchema)   ","import express from \"express\";\r\nimport multer from \"multer\";\r\nimport { Post } from \"../models/PostModel\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { uploadToS3, deleteObjectS3, getObject } from \"../utils/s3\";\r\nimport { s3Client } from \"../config/aws\";\r\nimport { User } from \"../models/UserModel\";\r\n\r\nexport const postRouter = express.Router();\r\n\r\n// S3 file upload configuration\r\nconst storage = multer.memoryStorage()\r\nconst upload = multer({ storage: storage })\r\n\r\n// Create a post with image (using S3 and Multer)\r\npostRouter.post(\"/\", upload.single(\"image\"), async (req, res) => {\r\n  const { title, description } = req.body;\r\n  let imageUrl = null;\r\n  let fileKey = null;\r\n  try {\r\n    if(req.file){\r\n      console.log('req.file is here: ',req.file);\r\n      fileKey = `${uuidv4()}_${req.file.originalname}`;\r\n      await uploadToS3({\r\n        data: req.file.buffer,\r\n        contentType: req.file.mimetype,\r\n        key: fileKey, \r\n      });\r\n    }\r\n    // Here, we create the post with the image URL\r\n    const newPost = new Post({\r\n      title,\r\n      description,\r\n      imageUrl,\r\n      imageKey: fileKey,\r\n      user: req.user?._id,\r\n    });\r\n\r\n    await newPost.save();\r\n    res.status(201).json(newPost);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error creating post\", error });\r\n  }\r\n});\r\n\r\n// Read All Posts\r\npostRouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const posts = await Post.find().populate(\"user\", \"name profilePicture\");\r\n\r\n    for(let post of posts){\r\n      if(post.imageKey){\r\n        post.imageUrl = await getObject({\r\n          key: post.imageKey as string    // TODO\r\n        })\r\n      }\r\n    }\r\n\r\n    res.status(200).json({\r\n      posts,\r\n      message:\r\n        posts.length > 0 ? \"Posts fetched successfully.\" : \"No posts found.\",\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error fetching posts\", error });\r\n  }\r\n});\r\n\r\n// Read Single Post\r\npostRouter.get(\"/:id\", async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.id).populate(\"user\");\r\n    if (!post) {\r\n      res.status(404).json({ message: \"Post not found\" });\r\n      return;\r\n    }\r\n    res.status(200).json(post);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error fetching post\", error });\r\n  }\r\n});\r\n\r\npostRouter.get(\"/user/:name\", async (req, res) => {\r\n  try {\r\n    const posts = await Post.find({\r\n      user: req.user?._id\r\n    }).populate(\"user\",\"name profilePicture createdAt _id\");\r\n    \r\n    if (!posts) {\r\n      res.status(404).json({ message: \"Post not found\" });\r\n      return;\r\n    }\r\n    for(let post of posts){\r\n      if(post.imageKey){\r\n        post.imageUrl = await getObject({\r\n          key: post.imageKey as string    // TODO\r\n        })\r\n      }\r\n    }\r\n    res.status(200).json(posts);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error fetching post\", error });\r\n  }\r\n});\r\n// Update Post\r\npostRouter.put(\"/:id\", upload.single(\"image\"), async (req, res) => {\r\n  const { title, description } = req.body;\r\n\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    if (!post) {\r\n      res.status(404).json({ message: \"Post not found\" });\r\n      return;\r\n    }\r\n\r\n    post.title = title || post.title;\r\n    post.description = description || post.description;\r\n\r\n    if (req.file) {\r\n      // Upload the new image to S3 and get the URL\r\n      const fileKey = req.file.originalname;\r\n      const imageUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.amazonaws.com/${fileKey}`;\r\n      post.imageUrl = imageUrl;\r\n    }\r\n\r\n    await post.save();\r\n    res.status(200).json({post, message: \"Post Edited successfully !\"});\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error updating post\", error });\r\n  }\r\n});\r\n\r\n// Delete Post\r\npostRouter.delete(\"/:id\", async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    if (!post) {\r\n      res.status(404).json({ message: \"Post not found\" });\r\n      return;\r\n    }\r\n\r\n    // Delete the image from S3 if it exists\r\n    if (post.imageUrl) {\r\n      const fileKey = post.imageUrl.split(\"/\").pop();\r\n      if (fileKey) {\r\n        await deleteObjectS3({ key: fileKey });\r\n      }\r\n    }\r\n\r\n    await Post.deleteOne({ _id: req.params.id });\r\n    res.status(200).json({ message: \"Post deleted successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error deleting post\", error });\r\n  }\r\n});\r\n\r\nexport default postRouter;\r\n","import mongoose from \"mongoose\";\r\n\r\nconst postSchema = new mongoose.Schema(\r\n  {\r\n    title: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    imageUrl: {\r\n      type: String,\r\n    },\r\n    imageKey: {\r\n      type: String,\r\n    },\r\n    user: {\r\n      type: mongoose.Types.ObjectId,\r\n      ref: \"User\"\r\n    }\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const Post = mongoose.model(\"Post\", postSchema);\r\n","import {\r\n    S3Client,\r\n    PutObjectCommand,\r\n    GetObjectCommand,\r\n    DeleteObjectCommand,\r\n  } from \"@aws-sdk/client-s3\";\r\n  import { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\r\n  import { config } from \"dotenv\";\r\n  config({\r\n    path: \".env\"\r\n  });\r\n  \r\n  const bucketName = process.env.AWS_BUCKET_NAME!;\r\n  const bucketRegion = process.env.AWS_REGION!;\r\n  const accesskey = process.env.AWS_ACCESS_KEY_ID!;\r\n  const secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY!;\r\n\r\n  // S3 Client to interact with AWS S3.\r\n  const s3 = new S3Client({\r\n    region: bucketRegion,\r\n    credentials: {\r\n      accessKeyId: accesskey,\r\n      secretAccessKey,\r\n    },\r\n  });\r\n  \r\n  // Type for upload function, to make it reusable for any type of data\r\n  type UploadToS3Type<T extends Buffer | Uint8Array | ReadableStream<any>> = {\r\n    data: T;\r\n    contentType: string;\r\n    key: string;\r\n  };\r\n  \r\n  // Upload service: Uploads data to S3 and returns signed URL\r\n  export const uploadToS3 = async <T extends Buffer | Uint8Array | ReadableStream<any>>({\r\n    data,\r\n    contentType,\r\n    key,\r\n  }: UploadToS3Type<T>) => {\r\n    const command = new PutObjectCommand({\r\n      Body: data, // Now 'data' is guaranteed to be one of the allowed types\r\n      ContentType: contentType,\r\n      Key: key,\r\n      Bucket: bucketName,\r\n    });\r\n  \r\n    await s3.send(command); // Upload file to S3\r\n  };\r\n  \r\n  // Delete object from S3\r\n  export const deleteObjectS3 = async ({ key }: { key: string }): Promise<void> => {\r\n    const command = new DeleteObjectCommand({\r\n      Key: key,\r\n      Bucket: bucketName,\r\n    });\r\n    await s3.send(command);\r\n  };\r\n  \r\n  // Get signed URL for S3 operations\r\n  export const getSignedUrlAWS = async (\r\n    command: GetObjectCommand | PutObjectCommand | DeleteObjectCommand,\r\n    expiresIn: number = 3600 // Default to 1 hour\r\n  ): Promise<string> => {\r\n    return await getSignedUrl(s3, command, { expiresIn });\r\n  };\r\n  \r\n  // Retrieve signed URL to access an object in S3\r\n  export const getObject = async ({\r\n    key,\r\n  }: {\r\n    key: string;\r\n  }): Promise<string> => {\r\n    const getCommand = new GetObjectCommand({\r\n      Bucket: bucketName,\r\n      Key: key,\r\n    });\r\n  \r\n    const signedUrl = await getSignedUrlAWS(getCommand);\r\n  \r\n    return signedUrl;\r\n  };  ","import { NextFunction, Request, Response } from \"express\";\r\n\r\nexport const authMiddleware = (req: Request, res: Response, next: NextFunction) => {\r\n  if (req.isAuthenticated()) {\r\n    return next();\r\n  }\r\n  res.status(401).json({ message: \"Unauthorized\" });\r\n};\r\n"],"mappings":"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","names":["import_express","import_passport","mongoose","express","passport","import_dotenv","import_passport","import_mongoose","mongoose","passport","GoogleStrategy","import_dotenv","import_express","import_mongoose","mongoose","import_dotenv","express","multer","uuidv4","express","cors","session","MongoStore","passport"]}